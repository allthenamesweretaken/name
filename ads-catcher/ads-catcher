#!/bin/sh
##############################################################################
# PEB <pebdev@lavache.com>
# 2019.03.24
##############################################################################
# Copyright (C) 2019 
# This file is copyright under the latest version of the EUPL.
# Please see https://joinup.ec.europa.eu/collection/eupl for your rights 
# under this license.
##############################################################################

# ads-catcher internal informations
ADSC_VERSION="v1.2.0"

# Log, settings and temporary files
ADSC_TMPFILE=/tmp/ads-catcher.tmp
ADSC_SETTINGS=/etc/ads-catcher.cfg
PIHOLE_LOGFILE=/var/log/pihole.log
PIHOLE_BLACKLIST_FILE=/etc/pihole/blacklist.txt

# Blacklist files
ADSC_BLACKLIST_FOLDER=/usr/share/ads-catcher/blacklist
ADSC_HISTORY_FOLDER=/usr/share/ads-catcher/history/
YOUTUBE_BLACKLIST=$ADSC_BLACKLIST_FOLDER/youtube-blacklist.txt


##############################################################################
# @brief : function to read setting from configruation file
# @param $1 : configuration name to read
# @return value of the setting
##############################################################################
readSetting () {

  # Read value of the wanted seeting
  echo "`cat $ADSC_SETTINGS | grep $1 | tr -d ' ' | cut -d= -f2`"
}


##############################################################################
# @brief : function to read parameter from the temporary file
# @param $1 : parameter name to read
# @return value of the setting
##############################################################################
readTmpParameter () {

  # Read value of the wanted parameter
  echo "`cat $ADSC_TMPFILE | grep $1 | cut -d= -f2`"
}


##############################################################################
# @brief : function to write parameter into the temporary file
# @param $1 : parameter name to read
# @param $2 : value of the parameter
##############################################################################
writeTmpParameter () {

  # Argument check
  if [ $# -lt 2 ]; then
    echo "[writeTmpParameter] ERROR, missing argument"
    return 0
  fi

  # Remove previous entry from the file
  sed -i "/$1/d" $ADSC_TMPFILE

  # Write new entry
  echo "$1=$2" >> $ADSC_TMPFILE
}


##############################################################################
# @brief : function to add path of ads-catcher blacklist files
##############################################################################
addBlacklistFilesToPihole () {
  
  # Content of the pihole blacklist file
  F1_PIHOLE_BLACKLIST_CONTENT="`cat $PIHOLE_BLACKLIST_FILE`"

  # List of ads-catcher files
  F1_ADSC_BLACKLIST_FILES="`ls -d $ADSC_BLACKLIST_FOLDER/*`"

  # Save result into the blacklist file
  echo "$F1_PIHOLE_BLACKLIST_CONTENT\n$F1_ADSC_BLACKLIST_FILES" | awk 'NF' | tr -d ' ' | sort -u | uniq -u  > $PIHOLE_BLACKLIST_FILE
}


##############################################################################
# @brief : function to add blacklisted addresses directly inside the pi-hole 
#          blacklist file
##############################################################################
addBlacklistAddressesToPihole () {
 
  # Remove ads-catcher blacklist files from pi-hole blacklist
  sed -i '/ads-catcher\//d' $PIHOLE_BLACKLIST_FILE

  # Content of the pihole blacklist file
  F2_PIHOLE_BLACKLIST_CONTENT="`cat $PIHOLE_BLACKLIST_FILE`"

  # ads-catcher file list
  F2_ADSC_BLACKLIST_FILELIST="`ls -d $ADSC_BLACKLIST_FOLDER/*`"

  # Content of the ads-catcher blacklist file
  F2_ADSC_BLACKLIST_CONTENT="`cat $F2_ADSC_BLACKLIST_FILELIST`"

  # Save result into the blacklist file
  F2_RETVAL=`echo "$F2_PIHOLE_BLACKLIST_CONTENT\n$F2_ADSC_BLACKLIST_CONTENT" | awk 'NF' | tr -d ' ' | sort -u | uniq -u`
  echo "$F2_RETVAL" > $PIHOLE_BLACKLIST_FILE
}


##############################################################################
# @brief : function to know if we need to update pihole after calling a catcher
# @param $1 : file that contains list of addresses to block
# @return 1 if we need to update pihole, otherwise 0
##############################################################################
#isPiholeUpdateNeeded () {

  # Argument check
  #if [ $# -lt 1 ]; then
   # echo "[isPiholeUpdateNeeded] ERROR, missing argument"
   # return 0
  #fi

  # Parameters
  #F3_BLACKLIST_FILE=$1

  # Extract service name
  #F3_SERVICE_NAME=`echo $F3_BLACKLIST_FILE | sed 's/\-blacklist.txt'//`
  #F3_SERVICE_NAME=`basename $F3_SERVICE_NAME`

  # Compute number of entries
  #F3_NB_ENTRIES=`wc -l $F3_BLACKLIST_FILE | cut -d\  -f1`

  # Just for history, do a backup of this file
  #if [ $ADSC_CONF_BLACKLIST_BACKUP -eq 1 ]; then
    #F3_BACKUP_NAME="$F3_SERVICE_NAME-$F3_NB_ENTRIES.txt"
    #cp $F3_BLACKLIST_FILE $ADSC_HISTORY_FOLDER/$F3_BACKUP_NAME
  #fi

  # Extract previous number of entries
  #F3_PREVIOUS_NB_ENTRIES=$(readTmpParameter $F3_SERVICE_NAME)

  # Update pihole with new entries
  #if [ "$F3_NB_ENTRIES" != "$F3_PREVIOUS_NB_ENTRIES" ]; then
    #F3_RETVAL=1

    # Save state of this update
    #writeTmpParameter $F3_SERVICE_NAME $F3_NB_ENTRIES

  #else
    #F3_RETVAL=0
  #fi

  #return $F3_RETVAL
#}


##############################################################################
# @brief : function to update blacklist file with clean feature
# @param $1 : blacklist file that contains list of addresses to block
# @param $2 : list of addresses to add
##############################################################################
updateServiceBlacklistFile() {

  # Argument check
  if [ $# -lt 2 ]; then
    echo "[updateServiceBlacklistFile] ERROR, missing argument :"
    return
  fi

  # Parameters
  F4_BLACKLIST_FILE=$1
  F4_Y1=$2

  # Get previous blacklisted addresses
  F4_Y2=`cat $F4_BLACKLIST_FILE`

  # Save result into the blacklist file
  echo "$F4_Y1\n$F4_Y2" | awk 'NF' | tr -d ' ' | sort -u | uniq -u > $F4_BLACKLIST_FILE
}


##############################################################################
# @brief : function to remove whitelisted address from the blacklist file
# @param $1 : strings that contains list of addresses to block
# @param $2 : whitelisted address
##############################################################################
whitelistFiltering () {

  # Argument check
  if [ $# -lt 2 ]; then
    echo "[whitelistFiltering] ERROR, missing argument :"
    return
  fi

  # Parameters
  F5_BLACKLIST_ADDRESSES=$1
  F5_Y1=$2

  F5_Y2="$(echo "$F5_BLACKLIST_ADDRESSES" | sed "/$F5_Y1/d" | awk 'NF' | tr -d ' ' | sort -u)"
  echo "$F5_Y2"
}


##############################################################################
# @brief : function to read pihole log file (only new lines)
# @return : extracted data
##############################################################################
readPiholeMainLogs () {

  # Save last line of each logfiles to parse new log lony next time
  F6_NB_LINES_L0=`cat "$PIHOLE_LOGFILE" | wc -l`
  F6_NB_LINES_L1=`cat "$PIHOLE_LOGFILE.1" | wc -l`
 
  # Read tmp file to keep last line only
  F6_TMP_NB_LINES_L0=$(readTmpParameter "plog0")
  F6_TMP_NB_LINES_L1=$(readTmpParameter "plog1")

  # Check values
  if [ -z "$F6_TMP_NB_LINES_L0" ]; then
    F6_TMP_NB_LINES_L0=1
  fi

  if [ -z "$F6_TMP_NB_LINES_L1" ]; then
    F6_TMP_NB_LINES_L1=1
  fi

  # Check if logs where flushed
  if [ "$F6_NB_LINES_L0" -lt "$F6_TMP_NB_LINES_L0" ]; then
    F6_TMP_NB_LINES_L0=1
  fi

  if [ "$F6_NB_LINES_L1" -lt "$F6_TMP_NB_LINES_L1" ]; then
    F6_TMP_NB_LINES_L1=1
  fi

  # Remove no new lines
  F6_L0=`cat "$PIHOLE_LOGFILE" | sed "$F6_TMP_NB_LINES_L0,$F6_NB_LINES_L0!d"`
  F6_L1=`cat "$PIHOLE_LOGFILE.1" | sed "$F6_TMP_NB_LINES_L1,$F6_NB_LINES_L1!d"`

  # Extract dns request from the pihole logfiles
  F6_L0B=`echo "$F6_L0" | grep query | grep googlevideo.com | sed 's/.*query\[A*]\ //' | sed 's/from\ [a-Az-Z0-9.:]*//' | sort -u`
  F6_L1B=`echo "$F6_L1" | grep query | grep googlevideo.com | sed 's/.*query\[A*]\ //' | sed 's/from\ [a-Az-Z0-9.:]*//' | sort -u`
 
  # Save current number of lines for next extraction
  writeTmpParameter "plog0" "$F6_NB_LINES_L0"
  writeTmpParameter "plog1" "$F6_NB_LINES_L1"

  # Prepare output and return it
  F6_LOG_OUT="$F6_L0B\n$F6_L1B"
  echo "$F6_LOG_OUT"
}


##############################################################################
# @brief : function to read all pihole log files
# @return : extracted data
##############################################################################
readPiholeAllLogs () {

  # Extract dns request from the pihole logfiles
  F8_Y2="$({ gunzip -d $PIHOLE_LOGFILE.*.gz --to-stdout & cat $PIHOLE_LOGFILE $PIHOLE_LOGFILE.1; } 2>/dev/null | awk '$5 ~ /^query/ && $6 ~ /googlevideo\.com$/{print $6}' | sort -u)"

  # Return list of addresses
  echo "$F8_Y2"
}


##############################################################################
# @brief : function to catch youtube ads
# @return 1 if we need to update pihole, otherwise 0
##############################################################################
catcherYoutube () {

  F7_RETVAL=1

  # be sure that the blacklist file exist
  touch $YOUTUBE_BLACKLIST
  
  # Read logfiles
  if [ "$ADSC_ARGS_READ_ALL_LOGS" -eq 1 ]; then
    echo "ALL"
    F7_Y2=$(readPiholeAllLogs)
  else
    F7_Y2=$(readPiholeMainLogs)
  fi

  # Do a whitelist filtering
  F7_Y2=$(whitelistFiltering "$F7_Y2" "redirector.googlevideo.com")
  F7_Y2=$(whitelistFiltering "$F7_Y2" "manifest.googlevideo.com")

  # Update service blacklist file (used with separated file option only)
  updateServiceBlacklistFile "$YOUTUBE_BLACKLIST" "$F7_Y2"
 
  # Check treatments result
  if [ -z "$F7_Y2" ]; then
    F7_RETVAL=0
  fi

  return $F7_RETVAL
}


##############################################################################
# @brief : display help menu and quit
##############################################################################
help () {

  echo "--------------------------------------------------------------------"
  echo "Usage :"
  echo " ads-catcher [-a][–h]"
  echo ""
  echo "Options :"
  echo " -a  Read all pihole logs (useful for the first launch)"
  echo " -h  Display this help"
  echo "--------------------------------------------------------------------"
  exit
}


##############################################################################
### MAIN ###
##############################################################################
echo "ads-catcher - $ADSC_VERSION"

# Settings
ADSC_ARGS_READ_ALL_LOGS=0
ADSC_CONF_BLACKLIST_BACKUP=$(readSetting blacklist_backup)
ADSC_CONF_BLACKLIST_SEPARATED_FILES=$(readSetting blacklist_seperated_files)

# Create blacklist folder and tmp files to be sure
touch $ADSC_TMPFILE
mkdir -p $ADSC_BLACKLIST_FOLDER
mkdir -p $ADSC_HISTORY_FOLDER

# Special arguments
while getopts ":ha" opt; do
  case ${opt} in
    h )  help ;;
    a )  ADSC_ARGS_READ_ALL_LOGS=1;;
    \? ) help;;
  esac
done

# Call different catchers
catcherYoutube
RETVAL_YOUTUBE=$?

if [ $RETVAL_YOUTUBE -eq 1 ]; then
  
  if [ $ADSC_CONF_BLACKLIST_SEPARATED_FILES -eq 1 ]; then
    # Refresh list of blacklist files
    addBlacklistFilesToPihole
  else
    # Case of not separated files of blacklisted addresses
    addBlacklistAddressesToPihole
  fi

  # Update pihole with new entries
  /usr/local/bin/pihole -g
fi

